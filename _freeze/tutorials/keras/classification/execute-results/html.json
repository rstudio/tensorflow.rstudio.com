{
  "hash": "8e4ec8e5db85007ecc27415cb6ef92ed",
  "result": {
    "markdown": "---\ntitle: \"Basic Image Classification\"\ndescription: \"Train a neural network model to classify images of clothing.\"\nid: 2\naliases:\n  - ../beginners/basic-ml/index.html\n  - ../beginners/basic-ml/tutorial_basic_classification/index.html\n  - ../../articles/getting_started.html\n  - ../../articles/tutorial_basic_classification.html\n---\n\n\nIn this guide, we will train a neural network model to classify images of clothing, like sneakers and shirts.\nIt's fine if you don't understand all the details, this is a fast-paced overview of a complete Keras program with the details explained as we go.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keras)\n```\n:::\n\n\n## Import the Fashion MNIST dataset\n\nThis guide uses the [Fashion MNIST](https://github.com/zalandoresearch/fashion-mnist) dataset which contains 70,000 grayscale images in 10 categories.\nThe images show individual articles of clothing at low resolution (28 by 28 pixels), as seen here:\n\n![Figure 1. Fashion-MNIST samples (by Zalando, MIT License).](img/fashion-mnist-sprite.png)\n\nFashion MNIST is intended as a drop-in replacement for the classic [MNIST](http://yann.lecun.com/exdb/mnist/) dataset---often used as the \"Hello, World\" of machine learning programs for computer vision.\nThe MNIST dataset contains images of handwritten digits (0, 1, 2, etc) in an identical format to the articles of clothing we'll use here.\n\nThis guide uses Fashion MNIST for variety, and because it's a slightly more challenging problem than regular MNIST.\nBoth datasets are relatively small and are used to verify that an algorithm works as expected.\nThey're good starting points to test and debug code.\n\nWe will use 60,000 images to train the network and 10,000 images to evaluate how accurately the network learned to classify images.\nYou can access the Fashion MNIST directly from Keras.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfashion_mnist <- dataset_fashion_mnist()\n\nc(train_images, train_labels) %<-% fashion_mnist$train\nc(test_images, test_labels) %<-% fashion_mnist$test\n```\n:::\n\n\nAt this point we have four arrays: The train_images and train_labels arrays are the training set --- the data the model uses to learn.\nThe model is tested against the test set: the test_images, and test_labels arrays.\n\nThe images each are 28 x 28 arrays, with pixel values ranging between 0 and 255.\nThe labels are arrays of integers, ranging from 0 to 9.\nThese correspond to the class of clothing the image represents:\n\n| Digit | Class       |\n|-------|-------------|\n| 0     | T-shirt/top |\n| 1     | Trouser     |\n| 2     | Pullover    |\n| 3     | Dress       |\n| 4     | Coat        |\n| 5     | Sandal      |\n| 6     | Shirt       |\n| 7     | Sneaker     |\n| 8     | Bag         |\n| 9     | Ankle boot  |\n\nEach image is mapped to a single label.\nSince the class names are not included with the dataset, we'll store them in a vector to use later when plotting the images.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_names = c('T-shirt/top',\n                'Trouser',\n                'Pullover',\n                'Dress',\n                'Coat',\n                'Sandal',\n                'Shirt',\n                'Sneaker',\n                'Bag',\n                'Ankle boot')\n```\n:::\n\n\n## Explore the data\n\nLet's explore the format of the dataset before training the model.\nThe following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(train_images)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60000    28    28\n```\n:::\n:::\n\n\n    [1] 60000    28    28\n\nLikewise, there are 60,000 labels in the training set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(train_labels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60000\n```\n:::\n:::\n\n\n    [1] 60000\n\nEach label is an integer between 0 and 9:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_labels[1:20]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 9 0 0 3 0 2 7 2 5 5 0 9 5 5 7 9 1 0 6 4\n```\n:::\n:::\n\n\n    [1] 9 0 0 3 0 2 7 2 5 5 0 9 5 5 7 9 1 0 6 4\n\nThere are 10,000 images in the test set.\nAgain, each image is represented as 28 x 28 pixels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(test_images)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10000    28    28\n```\n:::\n:::\n\n\n    [1] 10000    28    28\n\nAnd the test set contains 10,000 images labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(test_labels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10000\n```\n:::\n:::\n\n\n    [1] 10000\n\n## Preprocess the data\n\nThe data must be preprocessed before training the network.\nIf you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(ggplot2)\n\nimage_1 <- as.data.frame(train_images[1, , ])\ncolnames(image_1) <- seq_len(ncol(image_1))\nimage_1$y <- seq_len(nrow(image_1))\nimage_1 <- gather(image_1, \"x\", \"value\", -y)\nimage_1$x <- as.integer(image_1$x)\n\nggplot(image_1, aes(x = x, y = y, fill = value)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"black\", na.value = NA) +\n  scale_y_reverse() +\n  theme_minimal() +\n  theme(panel.grid = element_blank())   +\n  theme(aspect.ratio = 1) +\n  xlab(\"\") +\n  ylab(\"\")\n```\n\n::: {.cell-output-display}\n![](classification_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe scale these values to a range of 0 to 1 before feeding to the neural network model.\nFor this, we simply divide by 255.\n\nIt's important that the training set and the testing set are preprocessed in the same way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_images <- train_images / 255\ntest_images <- test_images / 255\n```\n:::\n\n\nDisplay the first 25 images from the training set and display the class name below each image.\nVerify that the data is in the correct format and we're ready to build and train the network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfcol=c(5,5))\npar(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')\nfor (i in 1:25) {\n  img <- train_images[i, , ]\n  img <- t(apply(img, 2, rev))\n  image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',\n        main = paste(class_names[train_labels[i] + 1]))\n}\n```\n\n::: {.cell-output-display}\n![](classification_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Build the model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model.\n\n### Setup the layers\n\nThe basic building block of a neural network is the layer.\nLayers extract representations from the data fed into them.\nAnd, hopefully, these representations are more meaningful for the problem at hand.\n\nMost of deep learning consists of chaining together simple layers.\nMost layers, like `layer_dense`, have parameters that are learned during training.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential()\nmodel %>%\n  layer_flatten(input_shape = c(28, 28)) %>%\n  layer_dense(units = 128, activation = 'relu') %>%\n  layer_dense(units = 10, activation = 'softmax')\n```\n:::\n\n\nThe first layer in this network, `layer_flatten`, transforms the format of the images from a 2d-array (of 28 by 28 pixels), to a 1d-array of 28 \\* 28 = 784 pixels.\nThink of this layer as unstacking rows of pixels in the image and lining them up.\nThis layer has no parameters to learn; it only reformats the data.\n\nAfter the pixels are flattened, the network consists of a sequence of two `dense` layers.\nThese are densely-connected, or fully-connected, neural layers.\nThe first dense layer has 128 nodes (or neurons).\nThe second (and last) layer is a 10-node softmax layer ---this returns an array of 10 probability scores that sum to 1.\nEach node contains a score that indicates the probability that the current image belongs to one of the 10 digit classes.\n\n### Compile the model\n\nBefore the model is ready for training, it needs a few more settings.\nThese are added during the model's compile step:\n\n-   Loss function --- This measures how accurate the model is during training. We want to minimize this function to \"steer\" the model in the right direction.\n-   Optimizer --- This is how the model is updated based on the data it sees and its loss function.\n-   Metrics ---Used to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n  optimizer = 'adam',\n  loss = 'sparse_categorical_crossentropy',\n  metrics = c('accuracy')\n)\n```\n:::\n\n\n### Train the model\n\nTraining the neural network model requires the following steps:\n\n-   Feed the training data to the model --- in this example, the `train_images` and `train_labels` arrays.\n-   The model learns to associate images and labels.\n-   We ask the model to make predictions about a test set --- in this example, the test_images array. We verify that the predictions match the labels from the test_labels array.\n\nTo start training, call the `fit` method --- the model is \"fit\" to the training data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% fit(train_images, train_labels, epochs = 5, verbose = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/5\n1875/1875 - 3s - loss: 0.4972 - accuracy: 0.8238 - 3s/epoch - 2ms/step\nEpoch 2/5\n1875/1875 - 3s - loss: 0.3760 - accuracy: 0.8645 - 3s/epoch - 1ms/step\nEpoch 3/5\n1875/1875 - 3s - loss: 0.3382 - accuracy: 0.8761 - 3s/epoch - 2ms/step\nEpoch 4/5\n1875/1875 - 3s - loss: 0.3155 - accuracy: 0.8837 - 3s/epoch - 1ms/step\nEpoch 5/5\n1875/1875 - 3s - loss: 0.2953 - accuracy: 0.8910 - 3s/epoch - 2ms/step\n```\n:::\n:::\n\n\nAs the model trains, the loss and accuracy metrics are displayed.\nThis model reaches an accuracy of about 0.88 (or 88%) on the training data.\n\n### Evaluate accuracy\n\nNext, compare how the model performs on the test dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscore <- model %>% evaluate(test_images, test_labels, verbose = 0)\n\ncat('Test loss:', score[\"loss\"], \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest loss: 0.3549634 \n```\n:::\n\n```{.r .cell-code}\ncat('Test accuracy:', score[\"accuracy\"], \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest accuracy: 0.8743 \n```\n:::\n:::\n\n\nIt turns out, the accuracy on the test dataset is a little less than the accuracy on the training dataset.\nThis gap between training accuracy and test accuracy is an example of overfitting.\nOverfitting is when a machine learning model performs worse on new data than on their training data.\n\n### Make predictions\n\nWith the model trained, we can use it to make predictions about some images.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions <- model %>% predict(test_images)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n313/313 - 0s - 269ms/epoch - 860us/step\n```\n:::\n:::\n\n\nHere, the model has predicted the label for each image in the testing set.\nLet's take a look at the first prediction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions[1, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.00000371771557 0.00000002080463 0.00000038686096 0.00000076035798\n [5] 0.00002858953485 0.00545424409211 0.00001009525022 0.00411043362692\n [9] 0.00010869514517 0.99028301239014\n```\n:::\n:::\n\n\nA prediction is an array of 10 numbers.\nThese describe the \"confidence\" of the model that the image corresponds to each of the 10 different articles of clothing.\nWe can see which label has the highest confidence value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.max(predictions[1, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nAs the labels are 0-based, this actually means a predicted label of 9 (to be found in class_names\\[9\\]).\nSo the model is most confident that this image is an ankle boot.\nAnd we can check the test label to see this is correct:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_labels[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\nLet's plot several images with their predictions.\nCorrect prediction labels are green and incorrect prediction labels are red.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfcol=c(5,5))\npar(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')\nfor (i in 1:25) {\n  img <- test_images[i, , ]\n  img <- t(apply(img, 2, rev))\n  # subtract 1 as labels go from 0 to 9\n  predicted_label <- which.max(predictions[i, ]) - 1\n  true_label <- test_labels[i]\n  if (predicted_label == true_label) {\n    color <- '#008800'\n  } else {\n    color <- '#bb0000'\n  }\n  image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',\n        main = paste0(class_names[predicted_label + 1], \" (\",\n                      class_names[true_label + 1], \")\"),\n        col.main = color)\n}\n```\n\n::: {.cell-output-display}\n![](classification_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nFinally, use the trained model to make a prediction about a single image.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grab an image from the test dataset\n# take care to keep the batch dimension, as this is expected by the model\nimg <- test_images[1, , , drop = FALSE]\ndim(img)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 28 28\n```\n:::\n:::\n\n\nNow predict the image:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions <- model %>% predict(img)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1/1 - 0s - 15ms/epoch - 15ms/step\n```\n:::\n\n```{.r .cell-code}\npredictions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               [,1]             [,2]           [,3]            [,4]\n[1,] 0.000003717719 0.00000002080463 0.000000386861 0.0000007603573\n              [,5]        [,6]          [,7]        [,8]         [,9]\n[1,] 0.00002858953 0.005454241 0.00001009524 0.004110432 0.0001086951\n        [,10]\n[1,] 0.990283\n```\n:::\n:::\n\n\n`predict` returns a list of lists, one for each image in the batch of data.\nGrab the predictions for our (only) image in the batch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subtract 1 as labels are 0-based\nprediction <- predictions[1, ] - 1\nwhich.max(prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nAnd, as before, the model predicts a label of 9.\n",
    "supporting": [
      "classification_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}