{
  "hash": "052b36b7b7c1e91975865f7ccb0ebe56",
  "result": {
    "markdown": "---\ntitle: Save and load\ndescription: \"Basics of saving and loading models\"\naliases:\n  - ../beginners/basic-ml/tutorial_save_and_restore/index.html\n  - ../../articles/tutorial_save_and_restore.html\n---\n\n\nModel progress can be saved during and after training.\nThis means a model can resume where it left off and avoid long training times.\nSaving also means you can share your model and others can recreate your work.\nWhen publishing research models and techniques, most machine learning practitioners share:\n\n-   code to create the model, and\n-   the trained weights, or parameters, for the model\n\nSharing this data helps others understand how the model works and try it themselves with new data.\n\nCaution: TensorFlow models are code and it is important to be careful with untrusted code.\nSee [Using TensorFlow Securely](https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md) for details.\n\n### Options\n\nThere are different ways to save TensorFlow models depending on the API you're using.\nThis guide uses [Keras](/guides/keras), a high-level API to build and train models in TensorFlow.\nFor other approaches see the TensorFlow [Save and Restore](/guides/keras/saved_model) guide or [Saving in eager](https://www.tensorflow.org/guide/eager#object-based_saving).\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\nlibrary(keras)\n```\n:::\n\n\n### Get an example dataset\n\nTo demonstrate how to save and load weights, you'll use the [MNIST dataset](http://yann$lecun.com/exdb/mnist/).\nTo speed up these runs, use the first 1000 examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(c(train_images, train_labels), c(test_images, test_labels)) %<-% dataset_mnist()\n\ntrain_labels <- train_labels[1:1000]\ntest_labels <- test_labels[1:1000]\n\ntrain_images <- train_images[1:1000,,] %>% array_reshape(dim = c(1000, 784))/255\ntest_images <- test_images[1:1000,,] %>% array_reshape(dim = c(1000, 784))/255\n```\n:::\n\n\n### Define a model\n\nStart by building a simple sequential model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a simple sequential model\ncreate_model <- function() {\n  model <- keras_model_sequential() %>%\n    layer_dense(512, activation = 'relu', input_shape = shape(784)) %>%\n    layer_dropout(0.2) %>%\n    layer_dense(10)\n\n  model %>% compile(\n    optimizer = 'adam',\n    loss = loss_sparse_categorical_crossentropy(from_logits = TRUE),\n    metrics = list(metric_sparse_categorical_accuracy())\n  )\n\n  model\n}\n\n# Create a basic model instance\nmodel <- create_model()\n\n# Display the model's architecture\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential\"\n____________________________________________________________________________\n Layer (type)                     Output Shape                  Param #     \n============================================================================\n dense_1 (Dense)                  (None, 512)                   401920      \n dropout (Dropout)                (None, 512)                   0           \n dense (Dense)                    (None, 10)                    5130        \n============================================================================\nTotal params: 407050 (1.55 MB)\nTrainable params: 407050 (1.55 MB)\nNon-trainable params: 0 (0.00 Byte)\n____________________________________________________________________________\n```\n:::\n:::\n\n\n## Save checkpoints during training\n\nYou can use a trained model without having to retrain it, or pick-up training where you left off in case the training process was interrupted.\nThe `callback_model_checkpoint()` callback allows you to continually save the model both *during* and at *the end* of training.\n\n### Checkpoint callback usage\n\nCreate a `callback_model_checkpoint()` callback that saves weights only during training:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheckpoint_path <- \"training_1/cp.ckpt\"\ncheckpoint_dir <- fs::path_dir(checkpoint_path)\n\n# Create a callback that saves the model's weights\ncp_callback <- callback_model_checkpoint(\n  filepath = checkpoint_path,\n  save_weights_only = TRUE,\n  verbose = 1\n)\n\n# Train the model with the new callback\nmodel %>% fit(\n  train_images,\n  train_labels,\n  epochs = 10,\n  validation_data = list(test_images, test_labels),\n  callbacks = list(cp_callback) # Pass callback to training\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/10\n\nEpoch 1: saving model to training_1/cp.ckpt\n32/32 - 1s - loss: 1.1534 - sparse_categorical_accuracy: 0.6730 - val_loss: 0.7187 - val_sparse_categorical_accuracy: 0.7840 - 940ms/epoch - 29ms/step\nEpoch 2/10\n\nEpoch 2: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.4104 - sparse_categorical_accuracy: 0.8810 - val_loss: 0.5314 - val_sparse_categorical_accuracy: 0.8410 - 129ms/epoch - 4ms/step\nEpoch 3/10\n\nEpoch 3: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.2863 - sparse_categorical_accuracy: 0.9230 - val_loss: 0.5097 - val_sparse_categorical_accuracy: 0.8270 - 125ms/epoch - 4ms/step\nEpoch 4/10\n\nEpoch 4: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.2128 - sparse_categorical_accuracy: 0.9370 - val_loss: 0.4331 - val_sparse_categorical_accuracy: 0.8560 - 118ms/epoch - 4ms/step\nEpoch 5/10\n\nEpoch 5: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.1484 - sparse_categorical_accuracy: 0.9710 - val_loss: 0.4299 - val_sparse_categorical_accuracy: 0.8640 - 124ms/epoch - 4ms/step\nEpoch 6/10\n\nEpoch 6: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.1146 - sparse_categorical_accuracy: 0.9720 - val_loss: 0.4172 - val_sparse_categorical_accuracy: 0.8600 - 123ms/epoch - 4ms/step\nEpoch 7/10\n\nEpoch 7: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.0776 - sparse_categorical_accuracy: 0.9920 - val_loss: 0.4153 - val_sparse_categorical_accuracy: 0.8700 - 120ms/epoch - 4ms/step\nEpoch 8/10\n\nEpoch 8: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.0582 - sparse_categorical_accuracy: 0.9940 - val_loss: 0.3971 - val_sparse_categorical_accuracy: 0.8730 - 119ms/epoch - 4ms/step\nEpoch 9/10\n\nEpoch 9: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.0452 - sparse_categorical_accuracy: 0.9970 - val_loss: 0.4223 - val_sparse_categorical_accuracy: 0.8600 - 133ms/epoch - 4ms/step\nEpoch 10/10\n\nEpoch 10: saving model to training_1/cp.ckpt\n32/32 - 0s - loss: 0.0348 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3950 - val_sparse_categorical_accuracy: 0.8740 - 115ms/epoch - 4ms/step\n```\n:::\n\n```{.r .cell-code}\n# This may generate warnings related to saving the state of the optimizer.\n# These warnings (and similar warnings throughout this notebook)\n# are in place to discourage outdated usage, and can be ignored.\n```\n:::\n\n\nThis creates a single collection of TensorFlow checkpoint files that are updated at the end of each epoch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(checkpoint_dir)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntraining_1\n├── checkpoint\n├── cp.ckpt.data-00000-of-00001\n└── cp.ckpt.index\n```\n:::\n:::\n\n\nAs long as two models share the same architecture you can share weights between them.\nSo, when restoring a model from weights-only, create a model with the same architecture as the original model and then set its weights.\n\nNow rebuild a fresh, untrained model and evaluate it on the test set.\nAn untrained model will perform at chance levels (\\~10% accuracy):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a basic model instance\nmodel <- create_model()\n\n# Evaluate the model\nuntrained_results <- model %>% evaluate(test_images, test_labels, verbose = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n32/32 - 0s - loss: 2.3928 - sparse_categorical_accuracy: 0.0840 - 101ms/epoch - 3ms/step\n```\n:::\n\n```{.r .cell-code}\ncat(\"Untrained model results: \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUntrained model results: \n```\n:::\n\n```{.r .cell-code}\nuntrained_results\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       loss sparse_categorical_accuracy \n                   2.392836                    0.084000 \n```\n:::\n:::\n\n\nThen load the weights from the checkpoint and re-evaluate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loads the weights\nload_model_weights_tf(model, checkpoint_path)\n\n# Re-evaluate the model\nrestored_model <- model %>% evaluate(test_images, test_labels, verbose = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n32/32 - 0s - loss: 0.3950 - sparse_categorical_accuracy: 0.8740 - 44ms/epoch - 1ms/step\n```\n:::\n\n```{.r .cell-code}\ncat(\"Restored model results: \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRestored model results: \n```\n:::\n\n```{.r .cell-code}\nrestored_model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       loss sparse_categorical_accuracy \n                  0.3950371                   0.8740000 \n```\n:::\n:::\n\n\n### Checkpoint callback options\n\nThe callback provides several options to provide unique names for checkpoints and adjust the checkpointing frequency.\nTrain a new model, and save uniquely named checkpoints once every five epochs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Include the epoch in the file name\ncheckpoint_path <- \"training_2/cp-list{epoch:04d}.ckpt\"\ncheckpoint_dir <- fs::path_dir(checkpoint_path)\n\nbatch_size <- 32\n\n# Create a callback that saves the model's weights every 5 epochs\ncp_callback <- callback_model_checkpoint(\n  filepath = checkpoint_path,\n  verbose = 1,\n  save_weights_only = TRUE,\n  save_freq = 5*batch_size\n)\n\n# Create a new model instance\nmodel <- create_model()\n\n# Train the model with the new callback\nmodel %>% fit(\n  train_images,\n  train_labels,\n  epochs = 50,\n  batch_size = batch_size,\n  callbacks = list(cp_callback),\n  validation_data = list(test_images, test_labels),\n  verbose = 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nEpoch 5: saving model to training_2/cp-list0005.ckpt\n\nEpoch 10: saving model to training_2/cp-list0010.ckpt\n\nEpoch 15: saving model to training_2/cp-list0015.ckpt\n\nEpoch 20: saving model to training_2/cp-list0020.ckpt\n\nEpoch 25: saving model to training_2/cp-list0025.ckpt\n\nEpoch 30: saving model to training_2/cp-list0030.ckpt\n\nEpoch 35: saving model to training_2/cp-list0035.ckpt\n\nEpoch 40: saving model to training_2/cp-list0040.ckpt\n\nEpoch 45: saving model to training_2/cp-list0045.ckpt\n\nEpoch 50: saving model to training_2/cp-list0050.ckpt\n```\n:::\n:::\n\n\nNow, look at the resulting checkpoints and choose the latest one:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(checkpoint_dir)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntraining_2\n├── checkpoint\n├── cp-list0005.ckpt.data-00000-of-00001\n├── cp-list0005.ckpt.index\n├── cp-list0010.ckpt.data-00000-of-00001\n├── cp-list0010.ckpt.index\n├── cp-list0015.ckpt.data-00000-of-00001\n├── cp-list0015.ckpt.index\n├── cp-list0020.ckpt.data-00000-of-00001\n├── cp-list0020.ckpt.index\n├── cp-list0025.ckpt.data-00000-of-00001\n├── cp-list0025.ckpt.index\n├── cp-list0030.ckpt.data-00000-of-00001\n├── cp-list0030.ckpt.index\n├── cp-list0035.ckpt.data-00000-of-00001\n├── cp-list0035.ckpt.index\n├── cp-list0040.ckpt.data-00000-of-00001\n├── cp-list0040.ckpt.index\n├── cp-list0045.ckpt.data-00000-of-00001\n├── cp-list0045.ckpt.index\n├── cp-list0050.ckpt.data-00000-of-00001\n└── cp-list0050.ckpt.index\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlatest <- tf$train$latest_checkpoint(checkpoint_dir)\nlatest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"training_2/cp-list0050.ckpt\"\n```\n:::\n:::\n\n\nNote: the default TensorFlow format only saves the 5 most recent checkpoints.\nTo test, reset the model and load the latest checkpoint:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new model instance\nmodel <- create_model()\n\n# Load the previously saved weights\nload_model_weights_tf(model, latest)\n\n# Re-evaluate the model\nmodel %>% evaluate(test_images, test_labels, verbose = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       loss sparse_categorical_accuracy \n                  0.4798704                   0.8770000 \n```\n:::\n:::\n\n\n## What are these files?\n\nThe above code stores the weights to a collection of [checkpoint](../../guide/checkpoint.qmd)-formatted files that contain only the trained weights in a binary format.\nCheckpoints contain: \\* One or more shards that contain your model's weights.\n\\* An index file that indicates which weights are stored in which shard.\n\nIf you are training a model on a single machine, you'll have one shard with(the suffix, { }) `.data-00000-of-00001`\n\n## Manually save weights\n\nTo save weights manually, use `save_model_weights_tf()`.\nBy default, Keras ---and the `save_model_weights_tf()` method in particular---uses the TensorFlow [Checkpoint](../../guide/checkpoint.qmd) format with a `.ckpt` extension.\nTo save in the HDF5 format with a `.h5` extension, refer to the [Save and load models](/guides/keras/save_and_serialize) guide.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the weights\nsave_model_weights_tf(model, './checkpoints/my_checkpoint')\n\n# Create a new model instance\nmodel <- create_model()\n\n# Restore the weights\nload_model_weights_tf(model, './checkpoints/my_checkpoint')\n\n# Evaluate the model\nrestored_model <- model %>% evaluate(test_images, test_labels, verbose = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n32/32 - 0s - loss: 0.4799 - sparse_categorical_accuracy: 0.8770 - 101ms/epoch - 3ms/step\n```\n:::\n\n```{.r .cell-code}\ncat(\"Restored model results: \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRestored model results: \n```\n:::\n\n```{.r .cell-code}\nrestored_model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       loss sparse_categorical_accuracy \n                  0.4798704                   0.8770000 \n```\n:::\n:::\n\n\n## Save the entire model\n\nCall `save_model_tf()` to save a model's architecture, weights, and training configuration in a single file/folder.\nThis allows you to export a model so it can be used without access to the original Python code\\*.\nSince the optimizer-state is recovered, you can resume training from exactly where you left off.\n\nAn entire model can be saved in two different file formats (`SavedModel` and `HDF5`).\nThe TensorFlow `SavedModel` format is the default file format in TF2\\$x.\nHowever, models can be saved in `HDF5` format.\nMore details on saving entire models in the two file formats is described below.\n\nSaving a fully-functional model is very useful---you can load them in TensorFlow.js ([Saved Model](https://www.tensorflow.org/js/tutorials/conversion/import_saved_model), [HDF5](https://www.tensorflow.org/js/tutorials/conversion/import_keras)) and then train and run them in web browsers, or convert them to run on mobile devices using TensorFlow Lite ([Saved Model](https://www.tensorflow.org/lite/convert/python_api#converting_a_savedmodel_), [HDF5](https://www.tensorflow.org/lite/convert/python_api#converting_a_keras_model_))\n\n\\*Custom objects (e.g. subclassed models or layers) require special attention when saving and loading.\nSee the **Saving custom objects** section below\n\n### SavedModel format\n\nThe SavedModel format is another way to serialize models.\nModels saved in this format can be restored using `load_model_tf()` and are compatible with TensorFlow Serving.\nThe [SavedModel guide](https://www.tensorflow.org/guide/saved_model) goes into detail about how to serve/inspect the SavedModel.\nThe section below illustrates the steps to save and restore the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create and train a new model instance.\nmodel <- create_model()\nmodel %>% fit(train_images, train_labels, epochs = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/5\n32/32 - 1s - loss: 1.1850 - sparse_categorical_accuracy: 0.6650 - 548ms/epoch - 17ms/step\nEpoch 2/5\n32/32 - 0s - loss: 0.4377 - sparse_categorical_accuracy: 0.8740 - 50ms/epoch - 2ms/step\nEpoch 3/5\n32/32 - 0s - loss: 0.2893 - sparse_categorical_accuracy: 0.9290 - 49ms/epoch - 2ms/step\nEpoch 4/5\n32/32 - 0s - loss: 0.2108 - sparse_categorical_accuracy: 0.9470 - 47ms/epoch - 1ms/step\nEpoch 5/5\n32/32 - 0s - loss: 0.1558 - sparse_categorical_accuracy: 0.9650 - 45ms/epoch - 1ms/step\n```\n:::\n\n```{.r .cell-code}\n# Save the entire model as a SavedModel.\nsave_model_tf(model, \"saved_model/my_model\")\n```\n:::\n\n\nThe SavedModel format is a directory containing a protobuf binary and a TensorFlow checkpoint.\nInspect the saved model directory:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# my_model directory\n# Contains an assets folder, saved_model.pb, and variables folder.\nfs::dir_tree(\"saved_model/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsaved_model/\n└── my_model\n    ├── assets\n    ├── fingerprint.pb\n    ├── keras_metadata.pb\n    ├── saved_model.pb\n    └── variables\n        ├── variables.data-00000-of-00001\n        └── variables.index\n```\n:::\n:::\n\n\nReload a fresh Keras model from the saved model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_model <- load_model_tf('saved_model/my_model')\n\n# Check its architecture\nsummary(new_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential_5\"\n____________________________________________________________________________\n Layer (type)                     Output Shape                  Param #     \n============================================================================\n dense_11 (Dense)                 (None, 512)                   401920      \n dropout_5 (Dropout)              (None, 512)                   0           \n dense_10 (Dense)                 (None, 10)                    5130        \n============================================================================\nTotal params: 407050 (1.55 MB)\nTrainable params: 407050 (1.55 MB)\nNon-trainable params: 0 (0.00 Byte)\n____________________________________________________________________________\n```\n:::\n:::\n\n\nThe restored model is compiled with the same arguments as the original model.\nTry running evaluate and predict with the loaded model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Evaluate the restored model\nrestored_model <- new_model %>% evaluate(test_images, test_labels, verbose = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n32/32 - 0s - loss: 0.4517 - sparse_categorical_accuracy: 0.8480 - 103ms/epoch - 3ms/step\n```\n:::\n\n```{.r .cell-code}\nrestored_model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       loss sparse_categorical_accuracy \n                  0.4517023                   0.8480000 \n```\n:::\n\n```{.r .cell-code}\ndim(predict(new_model, test_images))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n32/32 - 0s - 66ms/epoch - 2ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1000   10\n```\n:::\n:::\n\n\n### HDF5 format\n\nKeras provides a basic save format using the [HDF5](https://en.wikipedia.org/wiki/Hierarchical_Data_Format) standard.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create and train a new model instance.\nmodel <- create_model()\nmodel %>% fit(train_images, train_labels, epochs = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/5\n32/32 - 1s - loss: 1.1538 - sparse_categorical_accuracy: 0.6690 - 554ms/epoch - 17ms/step\nEpoch 2/5\n32/32 - 0s - loss: 0.4328 - sparse_categorical_accuracy: 0.8790 - 51ms/epoch - 2ms/step\nEpoch 3/5\n32/32 - 0s - loss: 0.2858 - sparse_categorical_accuracy: 0.9250 - 52ms/epoch - 2ms/step\nEpoch 4/5\n32/32 - 0s - loss: 0.2079 - sparse_categorical_accuracy: 0.9490 - 50ms/epoch - 2ms/step\nEpoch 5/5\n32/32 - 0s - loss: 0.1482 - sparse_categorical_accuracy: 0.9730 - 48ms/epoch - 2ms/step\n```\n:::\n\n```{.r .cell-code}\n# Save the entire model to a HDF5 file.\n# The '.h5' extension indicates that the model should be saved to HDF5.\nsave_model_hdf5(model, 'my_model.h5')\n```\n:::\n\n\nNow, recreate the model from that file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Recreate the exact same model, including its weights and the optimizer\nnew_model <- load_model_hdf5('my_model.h5')\n\n# Show the model architecture\nsummary(new_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential_6\"\n____________________________________________________________________________\n Layer (type)                     Output Shape                  Param #     \n============================================================================\n dense_13 (Dense)                 (None, 512)                   401920      \n dropout_6 (Dropout)              (None, 512)                   0           \n dense_12 (Dense)                 (None, 10)                    5130        \n============================================================================\nTotal params: 407050 (1.55 MB)\nTrainable params: 407050 (1.55 MB)\nNon-trainable params: 0 (0.00 Byte)\n____________________________________________________________________________\n```\n:::\n:::\n\n\nCheck its accuracy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_model %>% evaluate(test_images, test_labels, verbose = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       loss sparse_categorical_accuracy \n                  0.4328409                   0.8590000 \n```\n:::\n:::\n\n\nKeras saves models by inspecting their architectures.\nThis technique saves everything:\n\n-   The weight values\n-   The model's architecture\n-   The model's training configuration (what you pass to the `compile()` method)\n-   The optimizer and its state, if any (this enables you to restart training where you left off)\n\nKeras is not able to save the `v1$x` optimizers (from `tf.compat$v1$train`) since they aren't compatible with checkpoints.\nFor v1\\$x optimizers, you need to re-compile the model after loading---losing the state of the optimizer.\n\n### Saving custom objects\n\nIf you are using the SavedModel format, you can skip this section.\nThe key difference between HDF5 and SavedModel is that HDF5 uses object configs to save the model architecture, while SavedModel saves the execution graph.\nThus, SavedModels are able to save custom objects like subclassed models and custom layers without requiring the original code.\n\nTo save custom objects to HDF5, you must do the following:\n\n1.  Define a `get_config` method in your object, and optionally a `from_config` classmethod.\n\n-   `get_config(self)` returns a JSON-serializable dictionary of parameters needed to recreate the object.\n-   `from_config(cls, config)` uses the returned config from `get_config` to create a new object. By default, this function will use the config as initialization kwargs (`return do.call(cls, config)`).\n\n2.  Pass the object to the `custom_objects` argument when loading the model. The argument must be a dictionary mapping the string class name to the Python class. Eg. `load_model_tf(path, custom_objects = list('CustomLayer'= CustomLayer))`\n\nSee the [Writing layers and models from scratch](/guides/keras/custom_layers_and_models) tutorial for examples of custom objects and `get_config`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}