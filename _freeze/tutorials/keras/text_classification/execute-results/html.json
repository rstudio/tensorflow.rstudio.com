{
  "hash": "da8d8c511f50ccd2fb7bf160eb0eb6a8",
  "result": {
    "markdown": "---\ntitle: Basic Text Classification\ndescription: \"Train a binary classifier to perform sentiment analysis, starting from plain text files stored on disk.\"\naliases:\n  - ../beginners/basic-ml/tutorial_basic_text_classification/index.html\n  - ../../articles/tutorial_basic_text_classification.html\n---\n\n\nThis tutorial demonstrates text classification starting from plain text files stored on disk.\nYou'll train a binary classifier to perform sentiment analysis on an IMDB dataset.\nAt the end of the notebook, there is an exercise for you to try, in which you'll train a multi-class classifier to predict the tag for a programming question on Stack Overflow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\nlibrary(keras)\nlibrary(tfdatasets)\n```\n:::\n\n\n## Sentiment analysis\n\nThis notebook trains a sentiment analysis model to classify movie reviews as *positive* or *negative*, based on the text of the review.\nThis is an example of *binary*---or two-class---classification, an important and widely applicable kind of machine learning problem.\n\nYou'll use the [Large Movie Review Dataset](https://ai.stanford.edu/~amaas/data/sentiment/) that contains the text of 50,000 movie reviews from the [Internet Movie Database](https://www.imdb.com/).\nThese are split into 25,000 reviews for training and 25,000 reviews for testing.\nThe training and testing sets are *balanced*, meaning they contain an equal number of positive and negative reviews.\n\n### Download and explore the IMDB dataset\n\nLet's download and extract the dataset, then explore the directory structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz\"\n\ndataset <- get_file(\n  \"aclImdb_v1\",\n  url,\n  untar = TRUE,\n  cache_dir = '.',\n  cache_subdir = ''\n)\n\ndataset_dir <- file.path(\"aclImdb\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(dataset_dir)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"imdb.vocab\" \"imdbEr.txt\" \"README\"     \"test\"       \"train\"     \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_dir <- file.path(dataset_dir, 'train')\nlist.files(train_dir)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"labeledBow.feat\" \"neg\"             \"pos\"             \"unsup\"          \n[5] \"unsupBow.feat\"   \"urls_neg.txt\"    \"urls_pos.txt\"    \"urls_unsup.txt\" \n```\n:::\n:::\n\n\nThe `aclImdb/train/pos` and `aclImdb/train/neg` directories contain many text files, each of which is a single movie review.\nLet's take a look at one of them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_file <- file.path(train_dir, 'pos/1181_9.txt')\nreadr::read_file(sample_file)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Rachel Griffiths writes and directs this award winning short film. A heartwarming story about coping with grief and cherishing the memory of those we've loved and lost. Although, only 15 minutes long, Griffiths manages to capture so much emotion and truth onto film in the short space of time. Bud Tingwell gives a touching performance as Will, a widower struggling to cope with his wife's death. Will is confronted by the harsh reality of loneliness and helplessness as he proceeds to take care of Ruth's pet cow, Tulip. The film displays the grief and responsibility one feels for those they have loved and lost. Good cinematography, great direction, and superbly acted. It will bring tears to all those who have lost a loved one, and survived.\"\n```\n:::\n:::\n\n\n### Load the dataset\n\nNext, you will load the data off disk and prepare it into a format suitable for training.\nTo do so, you will use the helpful [text_dataset_from_directory](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/text_dataset_from_directory) utility, which expects a directory structure as follows.\n\n    main_directory/\n    ...class_a/\n    ......a_text_1.txt\n    ......a_text_2.txt\n    ...class_b/\n    ......b_text_1.txt\n    ......b_text_2.txt\n\nTo prepare a dataset for binary classification, you will need two folders on disk, corresponding to `class_a` and `class_b`.\nThese will be the positive and negative movie reviews, which can be found in `aclImdb/train/pos` and `aclImdb/train/neg`.\nAs the IMDB dataset contains additional folders, you will remove them before using this utility.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove_dir <- file.path(train_dir, 'unsup')\nunlink(remove_dir, recursive = TRUE)\n```\n:::\n\n\nNext, you will use the `text_dataset_from_directory` utility to create a labeled TensorFlow Dataset.\n[tfdatasets](https://www.tensorflow.org/guide/data) is a powerful collection of tools for working with data.\n\nWhen running a machine learning experiment, it is a best practice to divide your dataset into three splits: [train](https://developers.google.com/machine-learning/glossary#training_set), [validation](https://developers.google.com/machine-learning/glossary#validation_set), and [test](https://developers.google.com/machine-learning/glossary#test-set).\n\nThe IMDB dataset has already been divided into train and test, but it lacks a validation set.\nLet's create a validation set using an 80:20 split of the training data by using the `validation_split` argument below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbatch_size <- 32\nseed <- 42\n\nraw_train_ds <- text_dataset_from_directory(\n  'aclImdb/train',\n  batch_size = batch_size,\n  validation_split = 0.2,\n  subset = 'training',\n  seed = seed\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound 25000 files belonging to 2 classes.\nUsing 20000 files for training.\n```\n:::\n:::\n\n\nAs you can see above, there are 25,000 examples in the training folder, of which you will use 80% (or 20,000) for training.\nAs you will see in a moment, you can train a model by passing a dataset directly to `fit()`.\nIf you're new to tfdatasets, you can also iterate over the dataset and print out a few examples as follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbatch <- raw_train_ds %>%\n  reticulate::as_iterator() %>%\n  coro::collect(n = 1)\n\nbatch[[1]][[1]][1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(b'\"Pandemonium\" is a horror movie spoof that comes off more stupid than funny. Believe me when I tell you, I love comedies. Especially comedy spoofs. \"Airplane\", \"The Naked Gun\" trilogy, \"Blazing Saddles\", \"High Anxiety\", and \"Spaceballs\" are some of my favorite comedies that spoof a particular genre. \"Pandemonium\" is not up there with those films. Most of the scenes in this movie had me sitting there in stunned silence because the movie wasn\\'t all that funny. There are a few laughs in the film, but when you watch a comedy, you expect to laugh a lot more than a few times and that\\'s all this film has going for it. Geez, \"Scream\" had more laughs than this film and that was more of a horror film. How bizarre is that?<br /><br />*1/2 (out of four)', shape=(), dtype=string)\n```\n:::\n\n```{.r .cell-code}\nbatch[[1]][[2]][1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(0, shape=(), dtype=int32)\n```\n:::\n:::\n\n\nNotice the reviews contain raw text (with punctuation and occasional HTML tags like `<br/>`).\nYou will show how to handle these in the following section.\n\nThe labels are 0 or 1.\nTo see which of these correspond to positive and negative movie reviews, you can check the `class_names` property on the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Label 0 corresponds to\", raw_train_ds$class_names[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLabel 0 corresponds to neg\n```\n:::\n\n```{.r .cell-code}\ncat(\"Label 1 corresponds to\", raw_train_ds$class_names[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLabel 1 corresponds to pos\n```\n:::\n:::\n\n\nNext, you will create a validation and test dataset.\nYou will use the remaining 5,000 reviews from the training set for validation.\n\nNote: When using the `validation_split` and `subset` arguments, make sure to either specify a random seed, or to pass `shuffle = FALSE`, so that the validation and training splits have no overlap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_val_ds <- text_dataset_from_directory(\n  'aclImdb/train',\n  batch_size = batch_size,\n  validation_split = 0.2,\n  subset = 'validation',\n  seed = seed\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound 25000 files belonging to 2 classes.\nUsing 5000 files for validation.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_test_ds <- text_dataset_from_directory(\n  'aclImdb/test',\n  batch_size = batch_size\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound 25000 files belonging to 2 classes.\n```\n:::\n:::\n\n\n### Prepare the dataset for training\n\nNext, you will standardize, tokenize, and vectorize the data using the helpful `layer_text_vectorization()` layer.\n\nStandardization refers to preprocessing the text, typically to remove punctuation or HTML elements to simplify the dataset.\nTokenization refers to splitting strings into tokens (for example, splitting a sentence into individual words, by splitting on whitespace).\nVectorization refers to converting tokens into numbers so they can be fed into a neural network.\nAll of these tasks can be accomplished with this layer.\n\nAs you saw above, the reviews contain various HTML tags like `<br />`.\nThese tags will not be removed by the default standardizer in the `TextVectorization` layer (which converts text to lowercase and strips punctuation by default, but doesn't strip HTML).\nYou will write a custom standardization function to remove the HTML.\n\nNote: To prevent [training-testing skew](https://developers.google.com/machine-learning/guides/rules-of-ml#training-serving_skew) (also known as training-serving skew), it is important to preprocess the data identically at train and test time.\nTo facilitate this, the `text_vectorization` layer can be included directly inside your model, as shown later in this tutorial.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# creating a regex with all punctuation characters for replacing.\nre <- reticulate::import(\"re\")\n\npunctuation <- c(\"!\", \"\\\\\", \"\\\"\", \"#\", \"$\", \"%\", \"&\", \"'\", \"(\", \")\", \"*\",\n\"+\", \",\", \"-\", \".\", \"/\", \":\", \";\", \"<\", \"=\", \">\", \"?\", \"@\", \"[\",\n\"\\\\\", \"\\\\\", \"]\", \"^\", \"_\", \"`\", \"{\", \"|\", \"}\", \"~\")\n\npunctuation_group <- punctuation %>%\n  sapply(re$escape) %>%\n  paste0(collapse = \"\") %>%\n  sprintf(\"[%s]\", .)\n\ncustom_standardization <- function(input_data) {\n  lowercase <- tf$strings$lower(input_data)\n  stripped_html <- tf$strings$regex_replace(lowercase, '<br />', ' ')\n  tf$strings$regex_replace(\n    stripped_html,\n    punctuation_group,\n    \"\"\n  )\n}\n```\n:::\n\n\nNext, you will create a `TextVectorization` layer.\nYou will use this layer to standardize, tokenize, and vectorize our data.\nYou set the `output_mode` to `int` to create unique integer indices for each token.\n\nNote that you're using the default split function, and the custom standardization function you defined above.\nYou'll also define some constants for the model, like an explicit maximum `sequence_length`, which will cause the layer to pad or truncate sequences to exactly `sequence_length` values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_features <- 10000\nsequence_length <- 250\n\nvectorize_layer <- layer_text_vectorization(\n  standardize = custom_standardization,\n  max_tokens = max_features,\n  output_mode = \"int\",\n  output_sequence_length = sequence_length\n)\n```\n:::\n\n\nNext, you will call `adapt()` to fit the state of the preprocessing layer to the dataset.\nThis will cause the model to build an index of strings to integers.\n\nNote: It's important to only use your training data when calling adapt (using the test set would leak information).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a text-only dataset (without labels), then call adapt\ntrain_text <- raw_train_ds %>%\n  dataset_map(function(text, label) text)\nvectorize_layer %>% adapt(train_text)\n```\n:::\n\n\nLet's create a function to see the result of using this layer to preprocess some data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvectorize_text <- function(text, label) {\n  text <- tf$expand_dims(text, -1L)\n  list(vectorize_layer(text), label)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# retrieve a batch (of 32 reviews and labels) from the dataset\nbatch <- reticulate::as_iterator(raw_train_ds) %>%\n  reticulate::iter_next()\nfirst_review <- as.array(batch[[1]][1])\nfirst_label <- as.array(batch[[2]][1])\ncat(\"Review:\\n\", first_review)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReview:\n Great movie - especially the music - Etta James - \"At Last\". This speaks volumes when you have finally found that special someone.\n```\n:::\n\n```{.r .cell-code}\ncat(\"Label: \", raw_train_ds$class_names[first_label+1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLabel:  neg\n```\n:::\n\n```{.r .cell-code}\ncat(\"Vectorized review: \\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVectorized review: \n```\n:::\n\n```{.r .cell-code}\nprint(vectorize_text(first_review, first_label))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\ntf.Tensor(\n[[  86   17  260    2  222    1  571   31  229   11 2418    1   51   22\n    25  404  251   12  306  282    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n     0    0    0    0    0    0    0    0    0    0    0    0]], shape=(1, 250), dtype=int64)\n\n[[2]]\n[1] 0\n```\n:::\n:::\n\n\nAs you can see above, each token has been replaced by an integer.\nYou can lookup the token (string) that each integer corresponds to by calling `.get_vocabulary()` on the layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"9257 ---> \",get_vocabulary(vectorize_layer)[9257 + 1]) # because R is onde indexed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9257 --->  recipe\n```\n:::\n\n```{.r .cell-code}\ncat(\" 15 ---> \",get_vocabulary(vectorize_layer)[15 + 1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 15 --->  for\n```\n:::\n\n```{.r .cell-code}\ncat(\"Vocabulary size: \" , length(get_vocabulary(vectorize_layer)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVocabulary size:  10000\n```\n:::\n:::\n\n\nYou are nearly ready to train your model.\nAs a final preprocessing step, you will apply the `text_vectorization` layer you created earlier to the train, validation, and test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_ds <- raw_train_ds %>% dataset_map(vectorize_text)\nval_ds <- raw_val_ds %>% dataset_map(vectorize_text)\ntest_ds <- raw_test_ds %>% dataset_map(vectorize_text)\n```\n:::\n\n\n### Configure the dataset for performance\n\nThese are two important methods you should use when loading data to make sure that I/O does not become blocking.\n\n`dataset_cache()` keeps data in memory after it's loaded off disk.\nThis will ensure the dataset does not become a bottleneck while training your model.\nIf your dataset is too large to fit into memory, you can also use this method to create a performant on-disk cache, which is more efficient to read than many small files.\n\n`dataset_prefetch()` overlaps data preprocessing and model execution while training.\n\nYou can learn more about both methods, as well as how to cache data to disk in the [data performance guide](https://www.tensorflow.org/guide/data_performance).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAUTOTUNE <- tf$data$AUTOTUNE\n\ntrain_ds <- train_ds %>%\n  dataset_cache() %>%\n  dataset_prefetch(buffer_size = AUTOTUNE)\nval_ds <- val_ds %>%\n  dataset_cache() %>%\n  dataset_prefetch(buffer_size = AUTOTUNE)\ntest_ds <- test_ds %>%\n  dataset_cache() %>%\n  dataset_prefetch(buffer_size = AUTOTUNE)\n```\n:::\n\n\n### Create the model\n\nIt's time to create your neural network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nembedding_dim <- 16\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential() %>%\n  layer_embedding(max_features + 1, embedding_dim) %>%\n  layer_dropout(0.2) %>%\n  layer_global_average_pooling_1d() %>%\n  layer_dropout(0.2) %>%\n  layer_dense(1)\n\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential\"\n____________________________________________________________________________\n Layer (type)                     Output Shape                  Param #     \n============================================================================\n embedding (Embedding)            (None, None, 16)              160016      \n dropout_1 (Dropout)              (None, None, 16)              0           \n global_average_pooling1d (Globa  (None, 16)                    0           \n lAveragePooling1D)                                                         \n dropout (Dropout)                (None, 16)                    0           \n dense (Dense)                    (None, 1)                     17          \n============================================================================\nTotal params: 160033 (625.13 KB)\nTrainable params: 160033 (625.13 KB)\nNon-trainable params: 0 (0.00 Byte)\n____________________________________________________________________________\n```\n:::\n:::\n\n\nThe layers are stacked sequentially to build the classifier:\n\n1.  The first layer is an `embedding` layer. This layer takes the integer-encoded reviews and looks up an embedding vector for each word-index. These vectors are learned as the model trains. The vectors add a dimension to the output array. The resulting dimensions are: `(batch, sequence, embedding)`. To learn more about embeddings, check out the [Word embeddings](https://www.tensorflow.org/text/guide/word_embeddings) tutorial.\n2.  Next, a `global_average_pooling_1d` layer returns a fixed-length output vector for each example by averaging over the sequence dimension. This allows the model to handle input of variable length, in the simplest way possible.\n3.  This fixed-length output vector is piped through a fully-connected (`dense`) layer with 16 hidden units.\n4.  The last layer is densely connected with a single output node.\n\n### Loss function and optimizer\n\nA model needs a loss function and an optimizer for training.\nSince this is a binary classification problem and the model outputs a probability (a single-unit layer with a sigmoid activation), you'll use `losses$BinaryCrossentropy` loss function.\n\nNow, configure the model to use an optimizer and a loss function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n  loss = loss_binary_crossentropy(from_logits = TRUE),\n  optimizer = 'adam',\n  metrics = metric_binary_accuracy(threshold = 0)\n)\n```\n:::\n\n\n### Train the model\n\nYou will train the model by passing the `dataset` object to the fit method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nepochs <- 10\nhistory <- model %>%\n  fit(\n    train_ds,\n    validation_data = val_ds,\n    epochs = epochs\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/10\n625/625 - 36s - loss: 0.6643 - binary_accuracy: 0.6975 - val_loss: 0.6154 - val_binary_accuracy: 0.7730 - 36s/epoch - 57ms/step\nEpoch 2/10\n625/625 - 1s - loss: 0.5491 - binary_accuracy: 0.8031 - val_loss: 0.4989 - val_binary_accuracy: 0.8234 - 1s/epoch - 2ms/step\nEpoch 3/10\n625/625 - 1s - loss: 0.4450 - binary_accuracy: 0.8447 - val_loss: 0.4203 - val_binary_accuracy: 0.8486 - 1s/epoch - 2ms/step\nEpoch 4/10\n625/625 - 1s - loss: 0.3787 - binary_accuracy: 0.8658 - val_loss: 0.3738 - val_binary_accuracy: 0.8616 - 1s/epoch - 2ms/step\nEpoch 5/10\n625/625 - 1s - loss: 0.3354 - binary_accuracy: 0.8802 - val_loss: 0.3451 - val_binary_accuracy: 0.8674 - 1s/epoch - 2ms/step\nEpoch 6/10\n625/625 - 1s - loss: 0.3044 - binary_accuracy: 0.8891 - val_loss: 0.3259 - val_binary_accuracy: 0.8722 - 1s/epoch - 2ms/step\nEpoch 7/10\n625/625 - 1s - loss: 0.2811 - binary_accuracy: 0.8978 - val_loss: 0.3126 - val_binary_accuracy: 0.8732 - 1s/epoch - 2ms/step\nEpoch 8/10\n625/625 - 1s - loss: 0.2619 - binary_accuracy: 0.9031 - val_loss: 0.3033 - val_binary_accuracy: 0.8766 - 1s/epoch - 2ms/step\nEpoch 9/10\n625/625 - 1s - loss: 0.2459 - binary_accuracy: 0.9104 - val_loss: 0.2968 - val_binary_accuracy: 0.8778 - 1s/epoch - 2ms/step\nEpoch 10/10\n625/625 - 1s - loss: 0.2317 - binary_accuracy: 0.9168 - val_loss: 0.2921 - val_binary_accuracy: 0.8798 - 1s/epoch - 2ms/step\n```\n:::\n:::\n\n\n### Evaluate the model\n\nLet's see how the model performs.\nTwo values will be returned.\nLoss (a number which represents our error, lower values are better), and accuracy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% evaluate(test_ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n782/782 - 1s - loss: 0.3107 - binary_accuracy: 0.8726 - 1s/epoch - 2ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n           loss binary_accuracy \n         0.3107          0.8726 \n```\n:::\n:::\n\n\nThis fairly naive approach achieves an accuracy of about 86%.\n\n### Create a plot of accuracy and loss over time\n\n`model %>% fit()` returns a `History` object that contains everything that happened during training.\nYou can use `as.data.frame(history)` to obtain a data.frame with metrics per epoch or `plot(history)` as below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(history)\n```\n\n::: {.cell-output-display}\n![](text_classification_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nNotice the training loss *decreases* with each epoch and the training accuracy *increases* with each epoch.\nThis is expected when using a gradient descent optimization---it should minimize the desired quantity on every iteration.\n\nThis isn't the case for the validation loss and accuracy---they seem to peak before the training accuracy.\nThis is an example of overfitting: the model performs better on the training data than it does on data it has never seen before.\nAfter this point, the model over-optimizes and learns representations *specific* to the training data that do not *generalize* to test data.\n\nFor this particular case, you could prevent overfitting by simply stopping the training when the validation accuracy is no longer increasing.\nOne way to do so is to use the `callback_early_stopping()` callback.\n\n## Export the model\n\nIn the code above, you applied the `text_vectorization` layer to the dataset before feeding text to the model.\nIf you want to make your model capable of processing raw strings (for example, to simplify deploying it), you can include the `text_vectorization` layer inside your model.\nTo do so, you can create a new model using the weights you just trained.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexport_model <- keras_model_sequential() %>%\n  vectorize_layer() %>%\n  model() %>%\n  layer_activation(activation = \"sigmoid\")\n\nexport_model %>% compile(\n  loss = loss_binary_crossentropy(from_logits = FALSE),\n  optimizer = \"adam\",\n  metrics = 'accuracy'\n)\n\n# Test it with `raw_test_ds`, which yields raw strings\nexport_model %>% evaluate(raw_test_ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n782/782 - 2s - loss: 0.3107 - accuracy: 0.8726 - 2s/epoch - 3ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     loss  accuracy \n0.3106998 0.8726000 \n```\n:::\n:::\n\n\n### Inference on new data\n\nTo get predictions for new examples, you can simply call `predict()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexamples <- c(\n  \"The movie was great!\",\n  \"The movie was okay.\",\n  \"The movie was terrible...\"\n)\n\npredict(export_model, examples)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1/1 - 0s - 74ms/epoch - 74ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]\n[1,] 0.6043875\n[2,] 0.4259565\n[3,] 0.3445427\n```\n:::\n:::\n\n\nIncluding the text preprocessing logic inside your model enables you to export a model for production that simplifies deployment, and reduces the potential for [train/test skew](https://developers.google.com/machine-learning/guides/rules-of-ml#training-serving_skew).\n\nThere is a performance difference to keep in mind when choosing where to apply your TextVectorization layer.\nUsing it outside of your model enables you to do asynchronous CPU processing and buffering of your data when training on GPU.\nSo, if you're training your model on the GPU, you probably want to go with this option to get the best performance while developing your model, then switch to including the TextVectorization layer inside your model when you're ready to prepare for deployment.\n\nVisit this [tutorial](https://www.tensorflow.org/tutorials/keras/save_and_load) to learn more about saving models.\n\n## Exercise: multi-class classification on Stack Overflow questions\n\nThis tutorial showed how to train a binary classifier from scratch on the IMDB dataset.\nAs an exercise, you can modify this notebook to train a multi-class classifier to predict the tag of a programming question on [Stack Overflow](http://stackoverflow.com/).\n\nA [dataset](https://storage.googleapis.com/download.tensorflow.org/data/stack_overflow_16k.tar.gz) has been prepared for you to use containing the body of several thousand programming questions (for example, \"How can I sort a dictionary by value in Python?\") posted to Stack Overflow.\nEach of these is labeled with exactly one tag (either Python, CSharp, JavaScript, or Java).\nYour task is to take a question as input, and predict the appropriate tag, in this case, Python.\n\nThe dataset you will work with contains several thousand questions extracted from the much larger public Stack Overflow dataset on [BigQuery](https://console.cloud.google.com/marketplace/details/stack-exchange/stack-overflow), which contains more than 17 million posts.\n\nAfter downloading the dataset, you will find it has a similar directory structure to the IMDB dataset you worked with previously.\n\n    train/\n    ...python/\n    ......0$txt\n    ......1$txt\n    ...javascript/\n    ......0$txt\n    ......1$txt\n    ...csharp/\n    ......0$txt\n    ......1$txt\n    ...java/\n    ......0$txt\n    ......1$txt\n\nNote: To increase the difficulty of the classification problem, occurrences of the words Python, CSharp, JavaScript, or Java in the programming questions have been replaced with the word *blank* (as many questions contain the language they're about).\n\nTo complete this exercise, you should modify this notebook to work with(the Stack Overflow dataset by making the following modifications, { })\n\n1.  At the top of your notebook, update the code that downloads the IMDB dataset with code to download the [Stack Overflow dataset](https://storage$googleapis.com/download$tensorflow.org/data/stack_overflow_16k$tar$gz) that has already been prepared.\n    As the Stack Overflow dataset has a similar directory structure, you will not need to make many modifications.\n\n2.  Modify the last layer of your model to `Dense(4)`, as there are now four output classes.\n\n3.  When compiling the model, change the loss to `loss_sparse_categorical_crossentropy()`.\n    This is the correct loss function to use for a multi-class classification problem, when the labels for each class are integers (in this case, they can be 0, *1*, *2*, or *3*).\n    In addition, change the metrics to `metrics = 'accuracy'`, since this is a multi-class classification problem (`metric_binary_accuracy()` is only used for binary classifiers).\n\n4.  When plotting accuracy over time, change `binary_accuracy` and `val_binary_accuracy` to `accuracy` and `val_accuracy`, respectively.\n\n5.  Once these changes are complete, you will be able to train a multi-class classifier.\n\n## Learning more\n\nThis tutorial introduced text classification from scratch.\nTo learn more about the text classification workflow in general, check out the [Text classification guide](https://developers.google.com/machine-learning/guides/text-classification/) from Google Developers.\n",
    "supporting": [
      "text_classification_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}