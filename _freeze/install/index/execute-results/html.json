{
  "hash": "e9bdab03d1cee112c948105cf4428b62",
  "result": {
    "markdown": "---\ntitle: \"Quick start\"\nexecute:\n  eval: false\naliases:\n  - /installation\neditor:\n  markdown:\n    wrap: 72\n---\n\n\nPrior to using the **tensorflow** R package you need to install a\nversion of Python and TensorFlow on your system. Below we describe how\nto install to do this as well the various options available for\ncustomizing your installation.\n\nNote that this article principally covers the use of the R\n`install_tensorflow()` function, which provides an easy to use wrapper\nfor the various steps required to install TensorFlow. You can also\nchoose to install TensorFlow manually (as described at\n<https://www.tensorflow.org/install/>). In that case the [Custom\nInstallation](/install/custom.qmd) section covers how to arrange for the\ntensorflow R package to use the version you installed.\n\nTensorFlow is tested and supported on the following 64-bit systems:\n\n-   Ubuntu 22.04 or later\n-   Windows 10 or later\n-   macOS 11 (Big Sur) or later (Intel or M1/M2)\n\n## Installation\n\nFirst, install the tensorflow R package from GitHub as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"remotes\")\nremotes::install_github(\"rstudio/tensorflow\")\n```\n:::\n\n\nNext, make sure Python is installed on your system. You can download\nfrom [www.python.org/downloads](https://www.python.org/downloads), or\ncall the `install_python()` from reticulate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::install_python()\n```\n:::\n\n\nFinally, call `install_tensorflow()` function to install TensorFlow.\nThis will automatically create an isolated virtual environment named\n\"r-tensorflow\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\ninstall_tensorflow(envname = \"r-tensorflow\")\n```\n:::\n\n\nYou can also use `keras::install_keras()`, which installs TensorFlow, in\naddition to some commonly used packages like \"scipy\" and\n\"tensorflow-datasets\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"keras\")\nlibrary(keras)\ninstall_keras(envname = \"r-keras\")\n```\n:::\n\n\nYou can confirm that the installation succeeded with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\ntf$constant(\"Hello TensorFlow!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(b'Hello TensorFlow!', shape=(), dtype=string)\n```\n:::\n:::\n\n\nThis will provide you with a default installation of TensorFlow suitable\nfor use with the tensorflow R package. Read on if you want to learn\nabout additional installation options, including installing a version of\nTensorFlow that takes advantage of Nvidia GPUs if you have the correct\nCUDA libraries installed.\n\n## Installation methods\n\nTensorFlow is distributed as a Python package and so needs to be\ninstalled within a Python environment on your system. By default, the\n`install_tensorflow()` function attempts to install TensorFlow within an\nisolated Python environment (\"r-tensorflow\").\n\nThese are the available methods and their behavior:\n\n| Method     | Description                                                                |\n|------------------|------------------------------------------------------|\n| auto       | Automatically choose an appropriate default for the current platform.      |\n| virtualenv | Install into a Python virtual environment at `~/.virtualenvs/r-reticulate` |\n| conda      | Install into an Anaconda Python environment named `r-reticulate`           |\n\nBe aware that `install_tensorflow()` will intentionally not install into\na system Python installation (e.g., `/usr/bin/python`).\n\n`install_tensorflow()` is a wrapper around `reticulate::py_install()`.\nPlease refer to ['Installing Python\nPackages'](https://rstudio.github.io/reticulate/articles/python_packages.html)\nfor more information.\n\n## Alternate Versions\n\nBy default, `install_tensorflow()` install the latest release version of\nTensorFlow. You can override this behavior by specifying the `version`\nparameter. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall_tensorflow(version = \"2.10\")\n```\n:::\n\n\nYou can provide a full `major.minor.patch` version specification, or\njust a `major.minor` specification, in which case the latest patch is\nautomatically selected.\n\nThe default tensorflow package is GPU capable. However, if you will not\nbe using a GPU, you can install the smaller cpu-only package like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall_tensorflow(version = \"cpu\")\n```\n:::\n\n\nYou can install the nightly build of TensorFlow (CPU or GPU version)\nwith:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall_tensorflow(version = \"nightly\")      # cpu+gpu version\ninstall_tensorflow(version = \"nightly-cpu\")  # cpu version\n```\n:::\n\n\nYou can install any other build of TensorFlow by specifying a URL to a\nTensorFlow binary. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall_tensorflow(version = \"https://files.pythonhosted.org/packages/c2/c1/a035e377cf5a5b90eff27f096448fa5c5a90cbcf13b7eb0673df888f2c2d/tf_nightly-1.12.0.dev20180918-cp36-cp36m-manylinux1_x86_64.whl\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}